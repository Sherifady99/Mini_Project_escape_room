# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13-cqmlmAwZw4-LqmrVSUfoDq6WyzY7Fz
"""

import time


# define rooms and items

game_room = {
    "name": "game room",
    "type": "room",
}

couch = {
    "name": "couch",
    "type": "furniture",
}

piano = {
    "name": "piano",
    "type": "furniture",
}

door_a = {
    "name": "door a",
    "type": "door",
}

key_a = {
    "name": "key for door a",
    "type": "key",
    "target": door_a,
}

bedroom_1 = {
    "name": "bedroom 1",
    "type": "room",
}

queen_bed = {
    "name": "queen bed",
    "type": "furniture",
}

door_c = {
    "name": "door c",
    "type": "door",
}

door_b = {
    "name": "door b",
    "type": "door",
}

key_b = {
    "name": "key for door b",
    "type": "key",
    "target": door_b,
}

bedroom_2 = {
    "name": "bedroom 2",
    "type": "room",
}

double_bed = {
    "name": "double bed",
    "type": "furniture",
}

key_c = {
    "name": "key c",
    "type": "key",
    "target": door_c
}

dresser = {
    "name": "dresser",
    "type": "furniture",
}

living_room = {
    "name": "living room",
    "type": "room",
}

dining_table = {
    "name": "dining table",
    "type": "furniture"
}

door_d = {
    "name": "door d",
    "type": "door",
}

key_d = {
    "name": "key d",
    "type": "key",
    "target": door_d,
}

outside = {
  "name": "outside"
}



all_rooms = [game_room, bedroom_1, bedroom_2, living_room, outside]

all_doors = [door_a, door_b, door_c, door_d]

# define which items/rooms are related

object_relations = {
    "game room": [couch, piano, door_a],
    "piano": [key_a],
    "outside": [door_d],
    "door a": [game_room, bedroom_1],
    "bedroom 1": [queen_bed, door_a, door_b, door_c],
    "queen bed": [key_b],
    "door b": [bedroom_1, bedroom_2],
    "bedroom 2": [double_bed, dresser, door_b],
    "double bed": [key_c],
    "dresser": [key_d],
    "door c": [bedroom_1, living_room],
    "living room": [dining_table, door_d],
    "door d": [living_room, outside]
}

# define game state. Do not directly change this dict.
# Instead, when a new game starts, make a copy of this
# dict and use the copy to store gameplay state. This
# way you can replay the game multiple times.

INIT_GAME_STATE = {
    "current_room": game_room,
    "keys_collected": [],
    "target_room": outside
}

def linebreak():
    """
    Print a line break
    """
    print("\n\n")

def play_room(room):
    """
    Play a room. First check if the room being played is the target room.
    If it is, the game will end with success. Otherwise, let player either
    explore (list all items in this room) or examine an item found here.
    """
# Added Cheat code variable

    cheat_word = "cheat"

    game_state["current_room"] = room

    if(game_state["current_room"] == game_state["target_room"]):


#call new function to end the game

        end_game()
        return

# HINT

    if room == bedroom_2:
        print("HINT: You can go to previous rooms.")

    else:
        print("You are now in " + room["name"])

    intended_action = input("What would you like to do? Type 'explore' or 'examine'?").strip().lower()

# Cheat code

        # Checks if cheat_word is entered

    if intended_action.lower() == cheat_word:

      print("Cheat activated! Skipping to the end of the game...")

      play_room(game_state["target_room"])



# Change if to elif

    elif intended_action == "explore":
      explore_room(room)
      play_room(room)

    elif intended_action == "examine":
      examine_item(input("What would you like to examine?").strip().lower())

    else:
      print("Not sure what you mean. Type 'explore' or 'examine'.")
      play_room(room)

    linebreak()

def explore_room(room):
    """
    Explore a room. List all items belonging to this room.
    """
    items = [i["name"] for i in object_relations[room["name"]]]
    print("You explore the room. This is " + room["name"] + ". You find " + ", ".join(items))


def get_next_room_of_door(door, current_room):
    """
    From object_relations, find the two rooms connected to the given door.
    Return the room that is not the current_room.
    """
    connected_rooms = object_relations[door["name"]]
    for room in connected_rooms:
        if(current_room != room):

          return room


def start_game():
    """
    Start the game
    """
    print("You wake up on a couch and find yourself in a strange house with no windows which you have never been to before. You don't remember why you are here and what had happened before. You feel some unknown danger is approaching and you must get out of the house, NOW!")

 # Timer Start

    # Assigns a variable to the function time() that counts time to fraction of a second. "time" in time.time() is the calling the module. the time() in time.time() equals to the function of the module.
    # Adds start_time as a key in game_state dictionary that stores the number of the time that passed since January 1, 1970

    game_state["start_time"] = time.time()



    play_room(game_state["current_room"])

def end_game():



    # The previous - game_state["start_time"] = time.time() - stored the time in a value in the game_state dic


    # end_time variable is used to get the time of when the game was terminated.

    end_time = time.time()

    # Defines Total time elapsed : by subtracting the last time recorded (in the end_time variable) by the value in game state dic

    total_time = end_time - game_state["start_time"]

    # Divides the total time (in seconds) by 60 to convert it into minutes, ignoring any leftover seconds. (// is used to make sure it returns integers but int() already does this too)

    minutes = int(total_time // 60)

    # Makes sure that the total seconds is the remainer of the division of the total_time elapsed by 60 giving whole numbers as seconds. int() makes the number whole

    seconds = int(total_time % 60)

      # EX:
      # 125 / 60 = 2.0833 # gives the minutes with some decimals
      # 2.0833 - 2 = 0.0833 # subtract the minutes and keep the decimals
      # 0.0833 * 60 = 5 # this way we have the seconds

    print(f"Congrats! You escaped the room in {minutes} minutes and {seconds} seconds!")

def examine_item(item_name):
    """
    Examine an item which can be a door or furniture.
    First make sure the intended item belongs to the current room.
    Then check if the item is a door. Tell player if key hasn't been
    collected yet. Otherwise ask player if they want to go to the next
    room. If the item is not a door, then check if it contains keys.
    Collect the key if found and update the game state. At the end,
    play either the current or the next room depending on the game state
    to keep playing.
    """
    current_room = game_state["current_room"]
    next_room = ""
    output = None

    for item in object_relations[current_room["name"]]:

          # Checks if the name of the item the player inputed is in current room

        if(item["name"] == item_name):
            output = "You examine " + item_name + ". "

          #

            if(item["type"] == "door"):
                have_key = False

                for key in game_state["keys_collected"]:
                    if(key["target"] == item):
                        have_key = True

                if (have_key):
                    output += "You unlock it with a key you have."
                    next_room = get_next_room_of_door(item, current_room)

                else:
                    output += "It is locked but you don't have the key."
            else:
              # EX:
                # If piano has key append the key to keys collected. Checks also if the length of item  values is greater than 0 if not says its empty.

                if(item["name"] in object_relations and len(object_relations[item["name"]])>0):
                    item_found = object_relations[item["name"]].pop()
                    game_state["keys_collected"].append(item_found)
                    output += "You find " + item_found["name"] + "."
                else:
                    output += "There isn't anything interesting about it."
            print(output)

            break

    if(output is None):
        print("The item you requested is not found in the current room.")

# Added .lower so if you play with caps it still works

    if(next_room and input("Do you want to go to the next room? Enter 'yes' or 'no'").strip().lower() == 'yes'):
        play_room(next_room)
    else:
        play_room(current_room)

game_state = INIT_GAME_STATE.copy()

start_game()

